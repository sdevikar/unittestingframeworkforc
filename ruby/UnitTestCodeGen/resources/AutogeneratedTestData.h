#ifndef _AUTOGEN_TESTDATA_H_
#define _AUTOGEN_TESTDATA_H_

#include "AutogeneratedMetadata.h"

/***************************************************************************/
/* Autogenerated temporary variables as placeholders for pointer arguments */ 
/* and return value of function under test                                 */
/***************************************************************************/




/***************************************************/
/* Autogenerated test matrix from tab: TEST_MATRIX */
/***************************************************/
ST_TEST_INPUTS st_arr_test_inputs[MAX_NUM_TEST_CASES] =
{    

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			SXI_NOT_SUBSCRIBED,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			SXI_SUBSCRIBED,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			SXI_SUSPEND_ALERT,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			SXI_SUSPENDED,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_LOWER_LIMIT,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_UPPER_LIMIT,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_MID_VALUE,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_LOWER_LIMIT,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_UPPER_LIMIT,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_MID_VALUE,
			SUSPENSION_YEAR_INVALID
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_UPPER_LIMIT
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_UPPER_LIMIT
			0,
			0
		}

	},

	{
		&FUNC_UNDER_TEST,
		{
			0,
			0,
			0,
			0,
			0,
			INVALID_SUBSCRIPTION_STATUS,
			0,
			SUSPENSION_DAY_INVALID,
			SUSPENSION_MONTH_INVALID,
			SUSPENSION_YEAR_MID_VALUE
			0,
			0
		}

	}

	/* e.g.    
	&FUNC_UNDER_TEST, // Pointer to the function under test
	"arg_1__string_value", // argument 1 - string type
	arg2_int_value, // argument 2 - int type
	{
	arg3_structure_member_1_int_value
	arg3_structure_member_2_int_value
	"arg3_structure_member_3_string_value"
	}, // and this is how you would initialize a structure as an argument
	&temp_variable_1, // this is how temps will be used if needed

	"global_random_string", // a global string variable used by function under test
	0 //a global flag used by the function
	*/
};


#endif

